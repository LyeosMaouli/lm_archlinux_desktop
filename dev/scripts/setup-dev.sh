#!/bin/bash
#
# setup-dev.sh - Development environment setup script
#
# This script sets up the local development environment for
# Arch Linux Desktop Automation project.
#

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly BOLD='\033[1m'
readonly NC='\033[0m'

# UI symbols
readonly CHECKMARK='✓'
readonly CROSSMARK='✗'
readonly ARROW='→'

log_info() { echo -e "${GREEN}[INFO]${NC} $*"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $*"; }
log_error() { echo -e "${RED}[ERROR]${NC} $*"; } 
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $*"; }

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
DEV_DIR="$PROJECT_ROOT/dev"

main() {
    echo -e "${BLUE}${BOLD}╔═══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}${BOLD}║${NC}          ${GREEN}Arch Linux Desktop Automation${NC}                    ${BLUE}${BOLD}║${NC}"
    echo -e "${BLUE}${BOLD}║${NC}              ${YELLOW}Development Environment Setup${NC}                 ${BLUE}${BOLD}║${NC}"
    echo -e "${BLUE}${BOLD}╚═══════════════════════════════════════════════════════════════╝${NC}"
    echo
    
    log_info "Setting up development environment..."
    
    # Check prerequisites
    check_prerequisites
    
    # Set up environment variables
    setup_environment
    
    # Create development directories
    create_directories
    
    # Set up Git configuration
    setup_git
    
    # Set up pre-commit hooks
    setup_precommit
    
    # Set up development tools
    setup_tools
    
    # Create helper scripts
    create_helpers
    
    # Build development environment
    build_environment
    
    # Show completion message
    show_completion
}

check_prerequisites() {
    log_info "Checking prerequisites..."
    
    local missing_tools=()
    
    # Check required tools
    for tool in docker docker-compose git; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        log_error "Missing required tools: ${missing_tools[*]}"
        echo
        echo "Please install the missing tools:"
        echo
        for tool in "${missing_tools[@]}"; do
            case "$tool" in
                docker)
                    echo "  Docker: https://docs.docker.com/get-docker/"
                    ;;
                docker-compose)
                    echo "  Docker Compose: https://docs.docker.com/compose/install/"
                    ;;
                git)
                    echo "  Git: https://git-scm.com/downloads"
                    ;;
            esac
        done
        echo
        exit 1
    fi
    
    # Check Docker daemon
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker daemon is not running"
        echo "Please start Docker and try again"
        exit 1
    fi
    
    log_success "All prerequisites satisfied"
}

setup_environment() {
    log_info "Setting up environment variables..."
    
    # Create .env file for docker-compose
    cat > "$PROJECT_ROOT/.env" << EOF
# Development environment configuration
# Generated by setup-dev.sh on $(date)

# User configuration
USER_UID=$(id -u)
USER_GID=$(id -g)
USERNAME=developer

# Project configuration
COMPOSE_PROJECT_NAME=arch-desktop-automation
COMPOSE_FILE=docker-compose.yml

# Development settings
DEVELOPMENT_MODE=true
LOG_LEVEL=3
TERM=xterm-256color
EOF
    
    log_success "Environment configuration created: .env"
}

create_directories() {
    log_info "Creating development directories..."
    
    # Create directory structure
    mkdir -p "$DEV_DIR"/{config,scripts,database/init,logs,cache}
    
    # Create logs directory in project root
    mkdir -p "$PROJECT_ROOT/logs"
    
    # Set proper permissions
    chmod 755 "$DEV_DIR"/{config,scripts,database,logs,cache}
    
    log_success "Development directories created"
}

setup_git() {
    log_info "Setting up Git configuration..."
    
    # Set up git hooks directory
    mkdir -p "$PROJECT_ROOT/.git/hooks"
    
    # Check if git user is configured
    if ! git config user.name >/dev/null 2>&1; then
        log_warn "Git user.name not configured"
        read -r -p "Enter your Git username: " git_username
        git config --global user.name "$git_username"
    fi
    
    if ! git config user.email >/dev/null 2>&1; then
        log_warn "Git user.email not configured" 
        read -r -p "Enter your Git email: " git_email
        git config --global user.email "$git_email"
    fi
    
    # Configure Git for the project
    git config --local core.autocrlf false
    git config --local pull.rebase false
    git config --local init.defaultBranch main
    
    log_success "Git configuration completed"
}

setup_precommit() {
    log_info "Setting up pre-commit hooks..."
    
    # Create pre-commit configuration if it doesn't exist
    if [[ ! -f "$PROJECT_ROOT/.pre-commit-config.yaml" ]]; then
        cat > "$PROJECT_ROOT/.pre-commit-config.yaml" << 'EOF'
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      
  - repo: https://github.com/koalaman/shellcheck-precommit
    rev: v0.9.0
    hooks:
      - id: shellcheck
        args: [--severity=warning]
        
  - repo: https://github.com/ansible/ansible-lint
    rev: v6.14.3
    hooks:
      - id: ansible-lint
        files: \.(yaml|yml)$
        
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3
EOF
        log_success "Pre-commit configuration created"
    else
        log_info "Pre-commit configuration already exists"
    fi
}

setup_tools() {
    log_info "Setting up development tools..."
    
    # Create development configuration
    cat > "$DEV_DIR/config/dev-settings.json" << EOF
{
    "development": {
        "auto_reload": true,
        "debug_mode": true,
        "log_level": "debug",
        "testing": {
            "parallel": true,
            "verbose": true,
            "coverage": true
        }
    },
    "docker": {
        "build_cache": true,
        "resource_limits": {
            "memory": "2g",
            "cpus": "2.0"
        }
    },
    "tools": {
        "ansible_lint": true,
        "shellcheck": true,
        "yamllint": true,
        "black": true
    }
}
EOF
    
    log_success "Development tools configured"
}

create_helpers() {
    log_info "Creating helper scripts..."
    
    # Create test runner script
    cat > "$DEV_DIR/scripts/run-tests.sh" << 'EOF'
#!/bin/bash
# Test runner for development environment

set -euo pipefail

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
cd "$PROJECT_ROOT"

echo "Running development tests..."

# Check if we're in a container
if [[ -f /.dockerenv ]]; then
    # Running inside container
    ./scripts/testing/test_installation.sh "$@"
else
    # Running on host - use Docker
    docker-compose exec dev ./scripts/testing/test_installation.sh "$@"
fi
EOF
    
    # Create quality check script
    cat > "$DEV_DIR/scripts/quality-check.sh" << 'EOF'
#!/bin/bash
# Code quality checker for development environment

set -euo pipefail

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
cd "$PROJECT_ROOT"

echo "Running code quality checks..."

# Check if we're in a container
if [[ -f /.dockerenv ]]; then
    # Running inside container
    echo "Running shellcheck..."
    find scripts/ -name "*.sh" -exec shellcheck {} \;
    
    echo "Running ansible-lint..."
    ansible-lint configs/ansible/ || true
    
    echo "Running yamllint..."
    yamllint configs/ || true
else
    # Running on host - use Docker
    docker-compose exec dev bash -c "
        echo 'Running shellcheck...'
        find scripts/ -name '*.sh' -exec shellcheck {} \;
        
        echo 'Running ansible-lint...'
        ansible-lint configs/ansible/ || true
        
        echo 'Running yamllint...'
        yamllint configs/ || true
    "
fi

echo "Code quality checks completed"
EOF
    
    # Make scripts executable
    chmod +x "$DEV_DIR/scripts"/*.sh
    
    log_success "Helper scripts created"
}

build_environment() {
    log_info "Building development environment..."
    
    cd "$PROJECT_ROOT"
    
    # Build the development image
    echo "Building development Docker image..."
    docker-compose build dev
    
    # Start the development environment
    echo "Starting development services..."
    docker-compose up -d dev redis
    
    # Wait for services to be ready
    echo "Waiting for services to be ready..."
    sleep 10
    
    # Run post-create setup
    docker-compose exec dev bash -c "
        if [[ -f /workspace/.devcontainer/scripts/post-create.sh ]]; then
            /workspace/.devcontainer/scripts/post-create.sh
        fi
    " || log_warn "Post-create setup failed (this is normal for first-time setup)"
    
    log_success "Development environment built and started"
}

show_completion() {
    echo
    echo -e "${GREEN}${BOLD}╔═══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}${BOLD}║${NC}                    ${YELLOW}Setup Complete!${NC}                          ${GREEN}${BOLD}║${NC}"
    echo -e "${GREEN}${BOLD}╚═══════════════════════════════════════════════════════════════╝${NC}"
    echo
    echo -e "${GREEN}${CHECKMARK}${NC} Development environment is ready!"
    echo
    echo -e "${BOLD}Quick start commands:${NC}"
    echo -e "  ${BLUE}docker-compose exec dev bash${NC}       - Access development container"
    echo -e "  ${BLUE}docker-compose exec dev dev-deploy${NC} - Run deployment script"
    echo -e "  ${BLUE}docker-compose exec dev dev-test${NC}   - Run tests"
    echo -e "  ${BLUE}docker-compose logs -f dev${NC}        - View development logs"
    echo
    echo -e "${BOLD}Available services:${NC}"
    echo -e "  ${YELLOW}dev${NC}      - Main development environment"
    echo -e "  ${YELLOW}redis${NC}    - Redis cache server"
    echo -e "  ${YELLOW}docs${NC}     - Documentation server (port 8000)"
    echo
    echo -e "${BOLD}Helper scripts:${NC}"
    echo -e "  ${CYAN}dev/scripts/run-tests.sh${NC}      - Run comprehensive tests"
    echo -e "  ${CYAN}dev/scripts/quality-check.sh${NC}  - Run code quality checks"
    echo
    echo -e "${BOLD}Documentation:${NC}"
    echo -e "  ${CYAN}dev/README.md${NC}                 - Development environment guide"
    echo -e "  ${CYAN}http://localhost:8000${NC}         - Live documentation (if docs service is running)"
    echo
    echo -e "${BOLD}Next steps:${NC}"
    echo -e "  1. ${ARROW} Access the development container: ${BLUE}docker-compose exec dev bash${NC}"
    echo -e "  2. ${ARROW} Explore the project: ${BLUE}dev-info${NC}"
    echo -e "  3. ${ARROW} Run a test deployment: ${BLUE}dev-deploy --dry-run full${NC}"
    echo -e "  4. ${ARROW} Start coding!"
    echo
}

# Run main function
main "$@"