version: '3.8'

# Docker Compose configuration for Arch Linux Desktop Automation development
# This provides a complete development environment with all necessary services

services:
  # Main development environment
  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        USER_UID: ${USER_UID:-1000}
        USER_GID: ${USER_GID:-1000}
        USERNAME: ${USERNAME:-developer}
      target: development
    container_name: arch-desktop-dev
    hostname: arch-dev-container
    
    # Environment variables
    environment:
      - WORKSPACE_ROOT=/workspace
      - ANSIBLE_CONFIG=/workspace/configs/ansible/ansible.cfg
      - ANSIBLE_ROLES_PATH=/workspace/configs/ansible/roles
      - ANSIBLE_INVENTORY=/workspace/configs/ansible/inventory
      - ANSIBLE_HOST_KEY_CHECKING=False
      - ANSIBLE_RETRY_FILES_ENABLED=False
      - ANSIBLE_SSH_PIPELINING=True
      - LOG_LEVEL=3
      - DEVELOPMENT_MODE=true
      - PYTHONUNBUFFERED=1
      - TERM=xterm-256color
    
    # Volume mounts
    volumes:
      # Mount project source code
      - .:/workspace:cached
      # Persistent volumes for development data
      - dev-cache:/home/developer/.cache
      - dev-ansible:/home/developer/.ansible
      - dev-local:/home/developer/.local
      # Docker socket for testing
      - /var/run/docker.sock:/var/run/docker.sock
      # SSH keys for Git operations (optional)
      - ~/.ssh:/home/developer/.ssh:ro
    
    # Port mappings for development servers
    ports:
      - "8080:8080"   # Development server
      - "9000:9000"   # Testing server
      - "8000:8000"   # Documentation server
    
    # Working directory
    working_dir: /workspace
    
    # Keep container running
    tty: true
    stdin_open: true
    
    # Security settings
    cap_add:
      - SYS_PTRACE  # For debugging
    security_opt:
      - seccomp:unconfined
    
    # Resource limits
    mem_limit: 2g
    cpus: 2.0
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import ansible; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Networks
    networks:
      - dev-network
    
    # Dependencies
    depends_on:
      - redis
      - docs

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: arch-desktop-redis
    hostname: redis-dev
    
    # Persistent storage
    volumes:
      - redis-data:/data
    
    # Configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    
    # Networks
    networks:
      - dev-network
    
    # Resource limits
    mem_limit: 512m
    cpus: 0.5

  # Documentation server
  docs:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: arch-desktop-docs
    hostname: docs-server
    
    # Environment for documentation
    environment:
      - WORKSPACE_ROOT=/workspace
    
    # Volume mounts
    volumes:
      - .:/workspace:cached
      - docs-build:/workspace/.docs-build
    
    # Port for documentation server
    ports:
      - "8000:8000"
    
    # Working directory
    working_dir: /workspace
    
    # Command to serve documentation
    command: >
      sh -c "
        if [ -f mkdocs.yml ]; then
          mkdocs serve --dev-addr=0.0.0.0:8000
        else
          echo 'MkDocs config not found, creating basic docs server...'
          python -m http.server 8000 --directory docs
        fi
      "
    
    # Networks
    networks:
      - dev-network
    
    # Resource limits
    mem_limit: 512m
    cpus: 0.5

  # Testing environment (isolated)
  test:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: arch-desktop-test
    hostname: test-container
    
    # Environment variables for testing
    environment:
      - WORKSPACE_ROOT=/workspace
      - ANSIBLE_CONFIG=/workspace/configs/ansible/ansible.cfg
      - ANSIBLE_ROLES_PATH=/workspace/configs/ansible/roles
      - ANSIBLE_INVENTORY=/workspace/configs/ansible/inventory
      - TESTING_MODE=true
      - PYTHONUNBUFFERED=1
    
    # Volume mounts (read-only source)
    volumes:
      - .:/workspace:ro
      - test-logs:/workspace/logs
      - /var/run/docker.sock:/var/run/docker.sock
    
    # Working directory
    working_dir: /workspace
    
    # Default command for testing
    command: >
      sh -c "
        echo 'Testing environment ready. Run tests with:'
        echo '  docker-compose exec test ./scripts/testing/test_installation.sh'
        echo '  docker-compose exec test molecule test'
        tail -f /dev/null
      "
    
    # Networks
    networks:
      - dev-network
    
    # Resource limits
    mem_limit: 1g
    cpus: 1.0
    
    # Only start when explicitly requested
    profiles:
      - testing

  # Database for development (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: arch-desktop-postgres
    hostname: postgres-dev
    
    # Environment
    environment:
      - POSTGRES_DB=arch_automation_dev
      - POSTGRES_USER=developer
      - POSTGRES_PASSWORD=devpassword
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    
    # Persistent storage
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./dev/database/init:/docker-entrypoint-initdb.d:ro
    
    # Port mapping
    ports:
      - "5432:5432"
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U developer -d arch_automation_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Networks
    networks:
      - dev-network
    
    # Resource limits
    mem_limit: 512m
    cpus: 0.5
    
    # Only start when explicitly requested
    profiles:
      - database

# Named volumes for persistent data
volumes:
  dev-cache:
    driver: local
    name: arch-desktop-dev-cache
  
  dev-ansible:
    driver: local
    name: arch-desktop-dev-ansible
  
  dev-local:
    driver: local
    name: arch-desktop-dev-local
  
  redis-data:
    driver: local
    name: arch-desktop-redis-data
  
  docs-build:
    driver: local
    name: arch-desktop-docs-build
  
  test-logs:
    driver: local
    name: arch-desktop-test-logs
  
  postgres-data:
    driver: local
    name: arch-desktop-postgres-data

# Networks
networks:
  dev-network:
    driver: bridge
    name: arch-desktop-dev-network
    ipam:
      config:
        - subnet: 172.20.0.0/16