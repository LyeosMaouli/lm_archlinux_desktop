# Makefile for Arch Linux Hyprland Desktop Automation
# Generated by Ansible

.PHONY: help install bootstrap desktop security maintenance test lint clean

# Default target
help:
	@echo "Arch Linux Hyprland Desktop Automation"
	@echo "======================================"
	@echo ""
	@echo "Available targets:"
	@echo "  install     - Install Ansible and dependencies"
	@echo "  bootstrap   - Run initial system setup"
	@echo "  desktop     - Install Hyprland desktop environment"
	@echo "  security    - Apply security hardening"
	@echo "  maintenance - Run system maintenance tasks"
	@echo "  test        - Run validation tests"
	@echo "  lint        - Run code quality checks"
	@echo "  clean       - Clean temporary files"
	@echo ""

# Install Ansible and dependencies
install:
	@echo "Installing Ansible and dependencies..."
	sudo pacman -Sy --needed python python-pip
	pip install --user --break-system-packages -r requirements.txt
	ansible-galaxy install -r configs/ansible/requirements.yml

# Bootstrap system
bootstrap:
	@echo "Running system bootstrap..."
	ansible-playbook -i configs/ansible/inventory/localhost.yml configs/ansible/playbooks/bootstrap.yml

# Install desktop environment
desktop:
	@echo "Installing Hyprland desktop..."
	ansible-playbook -i configs/ansible/inventory/localhost.yml configs/ansible/playbooks/desktop.yml

# Apply security hardening
security:
	@echo "Applying security hardening..."
	ansible-playbook -i configs/ansible/inventory/localhost.yml configs/ansible/playbooks/security.yml

# Run maintenance tasks
maintenance:
	@echo "Running maintenance tasks..."
	ansible-playbook -i configs/ansible/inventory/localhost.yml configs/ansible/playbooks/maintenance.yml

# Run all configurations
full-install: bootstrap desktop security
	@echo "Full installation completed!"

# Test the installation
test:
	@echo "Running validation tests..."
	@if [ -f scripts/testing/test_installation.sh ]; then \
		bash scripts/testing/test_installation.sh; \
	else \
		echo "Test scripts not found"; \
	fi

# Lint Ansible files
lint:
	@echo "Running Ansible lint..."
	ansible-lint configs/ansible/
	yamllint configs/ansible/

# Clean temporary files
clean:
	@echo "Cleaning temporary files..."
	find . -name "*.retry" -delete
	find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	find . -name "*.pyc" -delete
	sudo rm -rf /tmp/ansible-* /tmp/yay-* 2>/dev/null || true

# Development helpers
dev-setup:
	@echo "Setting up development environment..."
	pip install --user --break-system-packages ansible-lint yamllint molecule

# Check system status
status:
	@echo "System Status:"
	@echo "=============="
	systemctl status sddm --no-pager || true
	systemctl status NetworkManager --no-pager || true
	ufw status || true
	fail2ban-client status || true

# Backup configuration
backup:
	@echo "Creating configuration backup..."
	@mkdir -p backup/$(shell date +%Y%m%d_%H%M%S)
	@cp -r configs backup/$(shell date +%Y%m%d_%H%M%S)/
	@echo "Backup created in backup/$(shell date +%Y%m%d_%H%M%S)/"