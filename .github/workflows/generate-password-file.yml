# Generate Encrypted Password File Workflow
# Creates an encrypted password file from GitHub Secrets for target computer deployment

name: Generate Password File

on:
  workflow_dispatch:
    inputs:
      encryption_passphrase:
        description: 'Passphrase to encrypt the password file (remember this!)'
        required: true
        type: string
      include_wifi:
        description: 'Include WiFi password in file'
        required: false
        default: true
        type: boolean
      file_format:
        description: 'Password file format'
        required: false
        default: 'yaml'
        type: choice
        options:
          - yaml
          - json
          - env

# Required permissions for creating releases and accessing repository
permissions:
  contents: write  # Required for creating releases and accessing repository content
  packages: read   # Required for accessing packages
  
jobs:
  generate-password-file:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate secrets
      run: |
        echo "🔐 Validating required secrets..."
        
        if [[ -z "${{ secrets.DEPLOY_USER_PASSWORD }}" ]]; then
          echo "❌ DEPLOY_USER_PASSWORD secret not found"
          exit 1
        fi
        
        if [[ -z "${{ secrets.DEPLOY_ROOT_PASSWORD }}" ]]; then
          echo "❌ DEPLOY_ROOT_PASSWORD secret not found"
          exit 1
        fi
        
        echo "✅ Required secrets validated"
        
    - name: Create password file (YAML)
      if: github.event.inputs.file_format == 'yaml'
      run: |
        echo "📝 Creating YAML password file..."
        cat > passwords.yaml << 'EOF'
        # Generated Passwords for Arch Linux Deployment
        # Created: $(date -Iseconds)
        # Repository: ${{ github.repository }}
        # Commit: ${{ github.sha }}
        
        passwords:
          user_password: "${{ secrets.DEPLOY_USER_PASSWORD }}"
          root_password: "${{ secrets.DEPLOY_ROOT_PASSWORD }}"
          luks_passphrase: "${{ secrets.DEPLOY_LUKS_PASSPHRASE }}"
        EOF
        
        if [[ "${{ github.event.inputs.include_wifi }}" == "true" ]]; then
          echo '  wifi_ssid: "${{ secrets.DEPLOY_WIFI_SSID }}"' >> passwords.yaml
          echo '  wifi_password: "${{ secrets.DEPLOY_WIFI_PASSWORD }}"' >> passwords.yaml
        fi
        
        echo "✅ YAML password file created"
        
    - name: Create password file (JSON)
      if: github.event.inputs.file_format == 'json'
      run: |
        echo "📝 Creating JSON password file..."
        cat > passwords.json << 'EOF'
        {
          "metadata": {
            "generated_at": "$(date -Iseconds)",
            "repository": "${{ github.repository }}",
            "commit": "${{ github.sha }}"
          },
          "passwords": {
            "user_password": "${{ secrets.DEPLOY_USER_PASSWORD }}",
            "root_password": "${{ secrets.DEPLOY_ROOT_PASSWORD }}",
            "luks_passphrase": "${{ secrets.DEPLOY_LUKS_PASSPHRASE }}"
        EOF
        
        if [[ "${{ github.event.inputs.include_wifi }}" == "true" ]]; then
          echo '    ,"wifi_ssid": "${{ secrets.DEPLOY_WIFI_SSID }}"' >> passwords.json
          echo '    ,"wifi_password": "${{ secrets.DEPLOY_WIFI_PASSWORD }}"' >> passwords.json
        fi
        
        echo '  }
        }' >> passwords.json
        
        echo "✅ JSON password file created"
        
    - name: Create password file (ENV)
      if: github.event.inputs.file_format == 'env'
      run: |
        echo "📝 Creating environment variables file..."
        cat > passwords.env << 'EOF'
        #!/bin/bash
        # Generated Environment Variables for Arch Linux Deployment
        # Created: $(date -Iseconds)
        # Repository: ${{ github.repository }}
        
        export DEPLOY_USER_PASSWORD="${{ secrets.DEPLOY_USER_PASSWORD }}"
        export DEPLOY_ROOT_PASSWORD="${{ secrets.DEPLOY_ROOT_PASSWORD }}"
        export DEPLOY_LUKS_PASSPHRASE="${{ secrets.DEPLOY_LUKS_PASSPHRASE }}"
        EOF
        
        if [[ "${{ github.event.inputs.include_wifi }}" == "true" ]]; then
          echo 'export DEPLOY_WIFI_SSID="${{ secrets.DEPLOY_WIFI_SSID }}"' >> passwords.env
          echo 'export DEPLOY_WIFI_PASSWORD="${{ secrets.DEPLOY_WIFI_PASSWORD }}"' >> passwords.env
        fi
        
        echo '
        echo "Environment variables loaded for Arch Linux deployment"
        echo "Run: ./zero_touch_deploy.sh --password-mode env"' >> passwords.env
        
        chmod +x passwords.env
        echo "✅ Environment file created"
        
    - name: Encrypt password file
      run: |
        echo "🔒 Encrypting password file with AES-256..."
        
        # Determine source file based on format
        case "${{ github.event.inputs.file_format }}" in
          yaml) SOURCE_FILE="passwords.yaml" ;;
          json) SOURCE_FILE="passwords.json" ;;
          env)  SOURCE_FILE="passwords.env" ;;
        esac
        
        # Encrypt the file
        openssl enc -aes-256-cbc -salt -pbkdf2 -iter 100000 \
          -in "$SOURCE_FILE" -out "passwords.enc" \
          -k "${{ github.event.inputs.encryption_passphrase }}"
        
        # Verify encryption worked
        if [[ -f "passwords.enc" ]] && [[ -s "passwords.enc" ]]; then
          echo "✅ Password file encrypted successfully"
          echo "📊 Encrypted file size: $(stat -c%s passwords.enc) bytes"
        else
          echo "❌ Failed to create encrypted file"
          exit 1
        fi
        
        # Clean up plain text file
        rm -f "$SOURCE_FILE"
        echo "🧹 Plain text file cleaned up"
        
    - name: Create deployment instructions
      run: |
        echo "📋 Creating deployment instructions..."
        cat > DEPLOYMENT_INSTRUCTIONS.md << 'EOF'
        # Deployment Instructions
        
        ## Generated Password File Information
        - **Created**: $(date -Iseconds)
        - **Repository**: ${{ github.repository }}
        - **Commit**: ${{ github.sha }}
        - **Format**: ${{ github.event.inputs.file_format }}
        - **WiFi Included**: ${{ github.event.inputs.include_wifi }}
        
        ## How to Use This Password File
        
        ### Step 1: Download the encrypted password file
        Download `passwords.enc` from the workflow artifacts.
        
        ### Step 2: Transfer to target computer
        ```bash
        # Copy to USB stick, or use network transfer
        cp passwords.enc /path/to/usb/
        ```
        
        ### Step 3: Deploy on target computer
        ```bash
        # Boot from Arch Linux ISO
        
        # Download deployment script
        curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/deployment/zero_touch_deploy.sh -o deploy.sh
        chmod +x deploy.sh
        
        # Run deployment with encrypted file
        ./deploy.sh --password-mode file --password-file passwords.enc
        # Enter your encryption passphrase when prompted
        ```
        
        ## Security Notes
        - The encryption passphrase you provided is NOT stored anywhere
        - Remember your encryption passphrase - you'll need it for deployment
        - Delete the password file after successful deployment
        - This file contains sensitive password information
        
        ## Alternative Deployment Methods
        
        ### Method 1: Environment Variables
        ```bash
        # Decrypt and source the file (if format is 'env')
        openssl enc -d -aes-256-cbc -salt -pbkdf2 -iter 100000 \
          -in passwords.enc -out temp_passwords.env \
          -k "your_encryption_passphrase"
        
        source temp_passwords.env
        ./deploy.sh --password-mode env
        rm temp_passwords.env
        ```
        
        ### Method 2: Extract and Use
        ```bash
        # Decrypt the file to view passwords
        openssl enc -d -aes-256-cbc -salt -pbkdf2 -iter 100000 \
          -in passwords.enc \
          -k "your_encryption_passphrase"
        ```
        
        **Remember**: Keep your encryption passphrase secure and delete temporary files after use!
        EOF
        
        echo "✅ Deployment instructions created"
        
    - name: Verify encrypted file
      run: |
        echo "🔍 Verifying encrypted file integrity..."
        
        # Test decryption without revealing content
        if openssl enc -d -aes-256-cbc -salt -pbkdf2 -iter 100000 \
           -in passwords.enc \
           -k "${{ github.event.inputs.encryption_passphrase }}" \
           > /dev/null 2>&1; then
          echo "✅ Encrypted file can be decrypted successfully"
        else
          echo "❌ Failed to decrypt file - encryption may have failed"
          exit 1
        fi
        
        echo "📊 Final file information:"
        ls -la passwords.enc DEPLOYMENT_INSTRUCTIONS.md
        
    - name: Get current date
      id: date
      run: echo "date=$(date -Iseconds)" >> $GITHUB_OUTPUT
        
    - name: Upload encrypted password file
      uses: actions/upload-artifact@v4
      with:
        name: encrypted-passwords-${{ github.run_number }}
        path: |
          passwords.enc
          DEPLOYMENT_INSTRUCTIONS.md
        retention-days: 7
        
    - name: Create release (optional)
      if: false  # Disabled - use artifacts only
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: passwords-${{ github.run_number }}
        name: Password File ${{ github.run_number }}
        body: |
          Encrypted password file for Arch Linux deployment
          
          **Generated**: ${{ steps.date.outputs.date }}
          **Format**: ${{ github.event.inputs.file_format }}
          **WiFi Included**: ${{ github.event.inputs.include_wifi }}
          
          Download `passwords.enc` and follow the deployment instructions.
          
          **Security**: Remember your encryption passphrase!
        files: |
          passwords.enc
          DEPLOYMENT_INSTRUCTIONS.md
        draft: false
        prerelease: false
        generate_release_notes: false
        
    - name: Security cleanup
      if: always()
      run: |
        echo "🔐 Performing security cleanup..."
        
        # Remove any temporary files that might contain passwords
        find . -name "*password*" -type f -not -name "passwords.enc" -delete 2>/dev/null || true
        find . -name "*secret*" -type f -delete 2>/dev/null || true
        
        echo "✅ Security cleanup completed"
        
    - name: Summary
      run: |
        echo "🎉 Password file generation completed!"
        echo ""
        echo "📥 Download the encrypted password file from:"
        echo "   → Workflow artifacts: encrypted-passwords-${{ github.run_number }}"
        echo "   → Release (if on main): passwords-${{ github.run_number }}"
        echo ""
        echo "🔑 Remember your encryption passphrase!"
        echo "🚀 Follow the deployment instructions to use the password file"
        echo ""
        echo "Next steps:"
        echo "1. Download passwords.enc and DEPLOYMENT_INSTRUCTIONS.md"
        echo "2. Transfer to target computer (USB stick or network)"
        echo "3. Run deployment script with --password-mode file"