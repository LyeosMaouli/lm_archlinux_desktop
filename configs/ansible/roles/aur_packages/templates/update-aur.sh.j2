#!/bin/bash
# AUR Package Update Script for {{ aur_user }}
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Configuration
LOG_FILE="/home/{{ aur_user }}/.config/aur-packages/update.log"
BACKUP_DIR="/home/{{ aur_user }}/.config/aur-packages/backups"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    echo -e "${RED}Error: $1${NC}" >&2
    log "ERROR: $1"
    exit 1
}

# Success message
success() {
    echo -e "${GREEN}$1${NC}"
    log "SUCCESS: $1"
}

# Warning message
warning() {
    echo -e "${YELLOW}Warning: $1${NC}"
    log "WARNING: $1"
}

# Info message
info() {
    echo -e "${BLUE}$1${NC}"
    log "INFO: $1"
}

# Create necessary directories
mkdir -p "$(dirname "$LOG_FILE")" "$BACKUP_DIR"

info "Starting AUR package update process..."

# Security check: verify yay is available
if ! command -v yay &> /dev/null; then
    error_exit "yay is not installed or not in PATH"
fi

# Create backup before updates
info "Creating backup of current AUR packages..."
if ! /home/{{ aur_user }}/.local/bin/aur-backup; then
    warning "Backup creation failed, continuing anyway..."
fi

# Update package databases
info "Updating package databases..."
if ! yay -Sy; then
    error_exit "Failed to update package databases"
fi

# Check for AUR updates
info "Checking for AUR package updates..."
aur_updates=$(yay -Qu --aur 2>/dev/null || true)

if [ -z "$aur_updates" ]; then
    success "All AUR packages are up to date"
    exit 0
fi

echo -e "${YELLOW}Available AUR updates:${NC}"
echo "$aur_updates"

{% if aur_security.review_pkgbuild %}
# Security review option
read -p "Review PKGBUILDs before updating? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    info "Please review PKGBUILDs for security issues..."
    yay -Su --aur --editmenu
else
    yay -Su --aur --noconfirm
fi
{% else %}
# Update without review (automated mode)
info "Updating AUR packages..."
if ! yay -Su --aur --noconfirm; then
    error_exit "AUR package update failed"
fi
{% endif %}

# Post-update cleanup
info "Performing post-update cleanup..."
if ! /home/{{ aur_user }}/.local/bin/aur-cleanup; then
    warning "Post-update cleanup failed"
fi

# Security audit
info "Running post-update security audit..."
/home/{{ aur_user }}/.local/bin/aur-security-audit

# Update package manifest
info "Updating package manifest..."
yay -Qm > "/home/{{ aur_user }}/.config/aur-packages/installed.txt"

success "AUR package update completed successfully"

# Notify user if in graphical session
if [ -n "${DISPLAY:-}" ] && command -v notify-send &> /dev/null; then
    notify-send "AUR Update Complete" "All AUR packages have been updated successfully"
fi