---
# Maintenance tasks for AUR packages

- name: Create AUR maintenance scripts directory
  file:
    path: "/home/{{ aur_user }}/.local/bin"
    state: directory
    owner: "{{ aur_user }}"
    group: "{{ aur_user }}"
    mode: '0755'
  tags: maintenance

- name: Create AUR security audit script
  copy:
    content: |
      #!/bin/bash
      # AUR Security Audit Script
      # Generated by Ansible
      
      echo "=== AUR Security Audit for {{ aur_user }} ==="
      echo "Date: $(date)"
      echo
      
      # Check for unsigned packages
      echo "Checking for unsigned packages..."
      yay -Qm | while read pkg version; do
        if ! yay -Si "$pkg" 2>/dev/null | grep -q "Signature"; then
          echo "WARNING: $pkg has no signature verification"
        fi
      done
      
      # Check for outdated packages
      echo
      echo "Checking for outdated AUR packages..."
      yay -Qu
      
      # Check build dependencies
      echo
      echo "Checking for unnecessary build dependencies..."
      pacman -Qdtq 2>/dev/null || echo "No orphaned packages found"
      
      # Check for packages in excluded list
      echo
      echo "Checking for packages that should not be from AUR..."
      {% for package in aur_excluded_packages %}
      if yay -Qm {{ package }} &>/dev/null; then
        echo "CRITICAL: {{ package }} is installed from AUR - this is dangerous!"
      fi
      {% endfor %}
      
      echo
      echo "=== Audit Complete ==="
    dest: "/home/{{ aur_user }}/.local/bin/aur-security-audit"
    owner: "{{ aur_user }}"
    group: "{{ aur_user }}"
    mode: '0755'
  tags: maintenance, security

- name: Create AUR backup script
  copy:
    content: |
      #!/bin/bash
      # AUR Package Backup Script
      # Generated by Ansible
      
      BACKUP_DIR="/home/{{ aur_user }}/.config/aur-packages/backups"
      DATE=$(date +%Y%m%d_%H%M%S)
      
      mkdir -p "$BACKUP_DIR"
      
      echo "Creating AUR package backup..."
      
      # Export explicit AUR packages
      yay -Qme > "$BACKUP_DIR/aur-explicit-$DATE.txt"
      
      # Export all AUR packages with versions
      yay -Qm > "$BACKUP_DIR/aur-all-$DATE.txt"
      
      # Create restore script
      cat > "$BACKUP_DIR/restore-$DATE.sh" << 'EOF'
      #!/bin/bash
      echo "Restoring AUR packages from backup..."
      while read package; do
        echo "Installing $package"
        yay -S --noconfirm --needed "$package"
      done < "aur-explicit-$DATE.txt"
      EOF
      
      chmod +x "$BACKUP_DIR/restore-$DATE.sh"
      
      # Keep only last 5 backups
      ls -t "$BACKUP_DIR"/aur-explicit-*.txt | tail -n +6 | xargs -r rm
      ls -t "$BACKUP_DIR"/aur-all-*.txt | tail -n +6 | xargs -r rm
      ls -t "$BACKUP_DIR"/restore-*.sh | tail -n +6 | xargs -r rm
      
      echo "Backup created: $BACKUP_DIR/aur-explicit-$DATE.txt"
    dest: "/home/{{ aur_user }}/.local/bin/aur-backup"
    owner: "{{ aur_user }}"
    group: "{{ aur_user }}"
    mode: '0755'
  tags: maintenance, backup

- name: Create AUR cleanup script
  copy:
    content: |
      #!/bin/bash
      # AUR Cleanup Script
      # Generated by Ansible
      
      echo "=== AUR Cleanup ==="
      
      # Clean package cache
      echo "Cleaning package cache..."
      yay -Sc --noconfirm
      
      # Remove orphaned packages
      echo "Removing orphaned packages..."
      orphans=$(yay -Qdtq)
      if [ -n "$orphans" ]; then
        echo "$orphans" | yay -Rs --noconfirm -
        echo "Removed orphaned packages: $orphans"
      else
        echo "No orphaned packages found"
      fi
      
      # Clean build directory
      echo "Cleaning build directory..."
      rm -rf "{{ yay_config.build_dir }}"/*
      
      # Update package databases
      echo "Updating package databases..."
      yay -Sy
      
      echo "=== Cleanup Complete ==="
    dest: "/home/{{ aur_user }}/.local/bin/aur-cleanup"
    owner: "{{ aur_user }}"
    group: "{{ aur_user }}"
    mode: '0755'
  tags: maintenance, cleanup

- name: Remove temporary sudo access for AUR user
  file:
    path: /etc/sudoers.d/50-aur-{{ aur_user }}
    state: absent
  tags: maintenance, security

- name: Create systemd user service for AUR updates (optional)
  copy:
    content: |
      [Unit]
      Description=AUR Package Updates
      
      [Service]
      Type=oneshot
      ExecStart=/home/{{ aur_user }}/.local/bin/update-aur
      User={{ aur_user }}
      
      [Install]
      WantedBy=default.target
    dest: "/home/{{ aur_user }}/.config/systemd/user/aur-update.service"
    owner: "{{ aur_user }}"
    group: "{{ aur_user }}"
    mode: '0644'
  when: aur_auto_update
  tags: maintenance, systemd

- name: Create systemd user timer for AUR updates (optional)
  copy:
    content: |
      [Unit]
      Description=AUR Package Updates Timer
      Requires=aur-update.service
      
      [Timer]
      OnCalendar={{ aur_update_interval }}ly
      Persistent=true
      
      [Install]
      WantedBy=timers.target
    dest: "/home/{{ aur_user }}/.config/systemd/user/aur-update.timer"
    owner: "{{ aur_user }}"
    group: "{{ aur_user }}"
    mode: '0644'
  when: aur_auto_update
  tags: maintenance, systemd

- name: Enable AUR update timer (optional)
  systemd:
    name: aur-update.timer
    enabled: yes
    scope: user
    daemon_reload: yes
  become_user: "{{ aur_user }}"
  become: yes
  when: aur_auto_update
  tags: maintenance, systemd