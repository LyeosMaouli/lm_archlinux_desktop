#!/bin/bash
# Battery health monitoring script
# Generated by Ansible for {{ ansible_hostname }}

# Configuration
BATTERY_PATH="/sys/class/power_supply/BAT0"
LOG_FILE="{{ battery_health_log | default('/var/log/battery-health.log') }}"
HEALTH_THRESHOLD="{{ battery_health_threshold | default(80) }}"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# Check if battery exists
check_battery_exists() {
    if [[ ! -d "$BATTERY_PATH" ]]; then
        log "ERROR: Battery not found at $BATTERY_PATH"
        exit 1
    fi
}

# Get battery health information
get_battery_health() {
    local capacity_full_design capacity_full current_health
    
    if [[ -f "$BATTERY_PATH/charge_full_design" ]]; then
        capacity_full_design=$(cat "$BATTERY_PATH/charge_full_design")
        capacity_full=$(cat "$BATTERY_PATH/charge_full")
        current_health=$((capacity_full * 100 / capacity_full_design))
    elif [[ -f "$BATTERY_PATH/energy_full_design" ]]; then
        capacity_full_design=$(cat "$BATTERY_PATH/energy_full_design")
        capacity_full=$(cat "$BATTERY_PATH/energy_full")
        current_health=$((capacity_full * 100 / capacity_full_design))
    else
        log "WARNING: Cannot determine battery health - design capacity not available"
        return 1
    fi
    
    echo "$current_health"
}

# Get battery cycle count
get_cycle_count() {
    if [[ -f "$BATTERY_PATH/cycle_count" ]]; then
        cat "$BATTERY_PATH/cycle_count"
    else
        echo "Unknown"
    fi
}

# Get battery temperature
get_battery_temp() {
    if [[ -f "$BATTERY_PATH/temp" ]]; then
        local temp_raw
        temp_raw=$(cat "$BATTERY_PATH/temp")
        # Convert from tenths of degrees Celsius
        echo "$((temp_raw / 10))"
    else
        echo "Unknown"
    fi
}

# Generate battery report
generate_battery_report() {
    local health cycle_count temp voltage current status capacity
    
    check_battery_exists
    
    health=$(get_battery_health)
    cycle_count=$(get_cycle_count)
    temp=$(get_battery_temp)
    
    # Get current battery status
    capacity=$(cat "$BATTERY_PATH/capacity" 2>/dev/null || echo "Unknown")
    status=$(cat "$BATTERY_PATH/status" 2>/dev/null || echo "Unknown")
    voltage=$(cat "$BATTERY_PATH/voltage_now" 2>/dev/null || echo "Unknown")
    current=$(cat "$BATTERY_PATH/current_now" 2>/dev/null || echo "Unknown")
    
    # Convert voltage from microvolts to volts
    if [[ "$voltage" != "Unknown" ]]; then
        voltage="$(echo "scale=2; $voltage / 1000000" | bc 2>/dev/null || echo "$voltage")V"
    fi
    
    # Convert current from microamps to milliamps  
    if [[ "$current" != "Unknown" ]]; then
        current="$(echo "scale=0; $current / 1000" | bc 2>/dev/null || echo "$current")mA"
    fi
    
    cat << EOF
Battery Health Report
====================
Generated: $(date)
Hostname: $(hostname)

Battery Information:
  Manufacturer: $(cat "$BATTERY_PATH/manufacturer" 2>/dev/null || echo "Unknown")
  Model: $(cat "$BATTERY_PATH/model_name" 2>/dev/null || echo "Unknown")
  Technology: $(cat "$BATTERY_PATH/technology" 2>/dev/null || echo "Unknown")
  
Current Status:
  Capacity: ${capacity}%
  Status: $status
  Health: ${health}%
  Voltage: $voltage
  Current: $current
  Temperature: ${temp}°C
  Cycle Count: $cycle_count

Design Specifications:
  Design Capacity: $(cat "$BATTERY_PATH/charge_full_design" 2>/dev/null || cat "$BATTERY_PATH/energy_full_design" 2>/dev/null || echo "Unknown")
  Full Capacity: $(cat "$BATTERY_PATH/charge_full" 2>/dev/null || cat "$BATTERY_PATH/energy_full" 2>/dev/null || echo "Unknown")
  Design Voltage: $(cat "$BATTERY_PATH/voltage_min_design" 2>/dev/null || echo "Unknown")

Health Assessment:
EOF

    # Health assessment
    if [[ "$health" != "Unknown" ]]; then
        if [[ $health -ge 90 ]]; then
            echo "  Status: Excellent (${health}%)"
        elif [[ $health -ge 80 ]]; then
            echo "  Status: Good (${health}%)"
        elif [[ $health -ge 60 ]]; then
            echo "  Status: Fair (${health}%) - Consider replacement soon"
        else
            echo "  Status: Poor (${health}%) - Replacement recommended"
        fi
    else
        echo "  Status: Cannot determine battery health"
    fi
    
    # Cycle count assessment
    if [[ "$cycle_count" != "Unknown" ]]; then
        if [[ $cycle_count -lt 300 ]]; then
            echo "  Cycles: Low usage ($cycle_count cycles)"
        elif [[ $cycle_count -lt 500 ]]; then
            echo "  Cycles: Moderate usage ($cycle_count cycles)"  
        elif [[ $cycle_count -lt 1000 ]]; then
            echo "  Cycles: High usage ($cycle_count cycles)"
        else
            echo "  Cycles: Very high usage ($cycle_count cycles) - Monitor closely"
        fi
    fi
    
    echo ""
    echo "Recommendations:"
    if [[ "$health" != "Unknown" && $health -lt $HEALTH_THRESHOLD ]]; then
        echo "  - Battery health is below ${HEALTH_THRESHOLD}%, consider replacement"
    fi
    
    if [[ "$cycle_count" != "Unknown" && $cycle_count -gt 500 ]]; then
        echo "  - High cycle count detected, monitor battery performance"
    fi
    
    if [[ "$temp" != "Unknown" && $temp -gt 40 ]]; then
        echo "  - Battery temperature is elevated (${temp}°C), ensure proper ventilation"
    fi
    
    echo "  - Avoid deep discharges (below 20%)"
    echo "  - Avoid keeping battery at 100% for extended periods"
    echo "  - Store at 50-60% charge if not using for extended periods"
}

# Monitor battery health continuously
monitor_battery_health() {
    check_battery_exists
    
    log "Starting battery health monitoring"
    
    while true; do
        local health
        health=$(get_battery_health)
        
        if [[ "$health" != "Unknown" ]]; then
            log "Battery health: ${health}%"
            
            if [[ $health -lt $HEALTH_THRESHOLD ]]; then
                log "WARNING: Battery health below threshold (${health}% < ${HEALTH_THRESHOLD}%)"
            fi
        fi
        
        # Check every hour
        sleep 3600
    done
}

# Main execution
case "${1:-report}" in
    "report")
        generate_battery_report
        ;;
    "monitor")
        monitor_battery_health
        ;;
    "health")
        check_battery_exists
        health=$(get_battery_health)
        echo "Battery health: ${health}%"
        ;;
    "cycles")
        check_battery_exists
        cycles=$(get_cycle_count)
        echo "Battery cycles: $cycles"
        ;;
    *)
        echo "Usage: $0 [report|monitor|health|cycles]"
        echo "  report  - Generate detailed battery report"
        echo "  monitor - Start continuous health monitoring"
        echo "  health  - Show current battery health percentage"
        echo "  cycles  - Show battery cycle count"
        exit 1
        ;;
esac