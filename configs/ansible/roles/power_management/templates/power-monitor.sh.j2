#!/bin/bash
# Power monitoring script
# Generated by Ansible for {{ ansible_hostname }}

# Configuration
LOG_FILE="{{ power_monitor_log | default('/var/log/power-monitor.log') }}"
ALERT_EMAIL="{{ power_monitor_email | default('root@localhost') }}"
CHECK_INTERVAL="{{ power_monitor_interval | default(300) }}"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >> "$LOG_FILE"
}

# Get power information
get_power_info() {
    local info=""
    
    # Battery information
    if [[ -d /sys/class/power_supply/BAT0 ]]; then
        local capacity=$(cat /sys/class/power_supply/BAT0/capacity 2>/dev/null || echo "Unknown")
        local status=$(cat /sys/class/power_supply/BAT0/status 2>/dev/null || echo "Unknown")
        info+="Battery: ${capacity}% (${status}) "
    fi
    
    # AC adapter
    if [[ -d /sys/class/power_supply/ADP1 ]] || [[ -d /sys/class/power_supply/AC ]]; then
        local ac_online=$(cat /sys/class/power_supply/ADP1/online 2>/dev/null || cat /sys/class/power_supply/AC/online 2>/dev/null || echo "Unknown")
        local ac_status="Disconnected"
        [[ "$ac_online" == "1" ]] && ac_status="Connected"
        info+="AC: ${ac_status} "
    fi
    
    # CPU frequency
    if [[ -f /proc/cpuinfo ]]; then
        local cpu_freq=$(grep "cpu MHz" /proc/cpuinfo | head -1 | awk '{print $4}' | cut -d. -f1)
        info+="CPU: ${cpu_freq}MHz "
    fi
    
    # Temperature
    if command -v sensors >/dev/null 2>&1; then
        local temp=$(sensors 2>/dev/null | grep -E "Core|Package" | head -1 | awk '{print $3}' | tr -d '+째C')
        [[ -n "$temp" ]] && info+="Temp: ${temp}째C "
    fi
    
    echo "$info"
}

# Check for power anomalies
check_power_anomalies() {
    # Check for high temperature
    if command -v sensors >/dev/null 2>&1; then
        local temp=$(sensors 2>/dev/null | grep -E "Core|Package" | head -1 | awk '{print $3}' | tr -d '+째C' | cut -d. -f1)
        if [[ -n "$temp" && $temp -gt {{ power_temp_warning | default(80) }} ]]; then
            log "WARNING: High CPU temperature: ${temp}째C"
        fi
    fi
    
    # Check battery health
    if [[ -f /sys/class/power_supply/BAT0/capacity ]]; then
        local capacity=$(cat /sys/class/power_supply/BAT0/capacity)
        local status=$(cat /sys/class/power_supply/BAT0/status)
        
        if [[ "$status" == "Discharging" && $capacity -lt {{ battery_critical_threshold | default(10) }} ]]; then
            log "CRITICAL: Battery critically low: ${capacity}%"
        fi
    fi
    
    # Check for high power consumption
    if command -v powertop >/dev/null 2>&1; then
        local power_usage=$(timeout 5 powertop --time=1 2>/dev/null | grep -E "[0-9]+\.[0-9]+ W" | head -1 | awk '{print $1}')
        if [[ -n "$power_usage" ]]; then
            local usage_int=$(echo "$power_usage" | cut -d. -f1)
            if [[ $usage_int -gt {{ power_usage_warning | default(25) }} ]]; then
                log "WARNING: High power usage: ${power_usage}W"
            fi
        fi
    fi
}

# Generate power report
generate_report() {
    local report_file="{{ power_report_dir | default('/tmp') }}/power-report-$(date +%Y%m%d-%H%M%S).txt"
    
    {
        echo "Power Monitoring Report"
        echo "======================"
        echo "Generated: $(date)"
        echo "Hostname: $(hostname)"
        echo ""
        echo "Current Status:"
        get_power_info
        echo ""
        
        if command -v tlp-stat >/dev/null 2>&1; then
            echo "TLP Status:"
            tlp-stat -s 2>/dev/null || echo "TLP not available"
            echo ""
        fi
        
        if command -v powertop >/dev/null 2>&1; then
            echo "Power Top Summary:"
            timeout 10 powertop --time=5 2>/dev/null | head -20 || echo "PowerTop not available"
            echo ""
        fi
        
        echo "Recent Power Events:"
        tail -20 "$LOG_FILE" 2>/dev/null || echo "No recent events"
        
    } > "$report_file"
    
    log "Power report generated: $report_file"
    echo "$report_file"
}

# Main monitoring function
monitor_power() {
    log "Power monitoring started"
    
    while true; do
        local power_info
        power_info=$(get_power_info)
        log "Power status: $power_info"
        
        check_power_anomalies
        
        sleep "$CHECK_INTERVAL"
    done
}

# Main execution
case "${1:-monitor}" in
    "monitor")
        monitor_power
        ;;
    "status")
        get_power_info
        ;;
    "check")
        check_power_anomalies
        ;;
    "report")
        generate_report
        ;;
    *)
        echo "Usage: $0 [monitor|status|check|report]"
        echo "  monitor - Start continuous monitoring"
        echo "  status  - Show current power status"
        echo "  check   - Check for power anomalies"
        echo "  report  - Generate power report"
        exit 1
        ;;
esac