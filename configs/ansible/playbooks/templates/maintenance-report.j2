#!/bin/bash
#
# System Maintenance Report
# Generated by Arch Linux Desktop Automation
# Date: {{ ansible_date_time.iso8601 }}
# Host: {{ ansible_hostname }}
#

echo "=========================================="
echo "    System Maintenance Report"
echo "=========================================="
echo "Generated: $(date)"
echo "Hostname: {{ ansible_hostname }}"
echo "Kernel: {{ ansible_kernel }}"
echo "Architecture: {{ ansible_architecture }}"
echo "Distribution: {{ ansible_distribution }} {{ ansible_distribution_version }}"
echo "Uptime: {{ ansible_uptime_seconds | int // 86400 }} days, {{ (ansible_uptime_seconds | int % 86400) // 3600 }} hours"
echo "=========================================="
echo

# System Information
echo "SYSTEM INFORMATION:"
echo "==================="
echo "CPU: {{ ansible_processor[2] if ansible_processor is defined else 'Unknown' }}"
echo "Memory: {{ (ansible_memtotal_mb / 1024) | round(1) }}GB total, {{ (ansible_memfree_mb / 1024) | round(1) }}GB free"
echo "Disk Usage:"
{% for mount in ansible_mounts %}
{% if mount.mount in ['/', '/home', '/var', '/tmp'] %}
echo "  {{ mount.mount }}: {{ ((mount.size_total - mount.size_available) / mount.size_total * 100) | round(1) }}% used ({{ (mount.size_available / 1024**3) | round(1) }}GB free)"
{% endif %}
{% endfor %}
echo

# Package Information
echo "PACKAGE INFORMATION:"
echo "===================="
echo "Checking for updates..."
if command -v pacman >/dev/null 2>&1; then
    UPDATES=$(pacman -Qu 2>/dev/null | wc -l)
    echo "Available package updates: $UPDATES"
    if [[ $UPDATES -gt 0 ]]; then
        echo "Outdated packages:"
        pacman -Qu 2>/dev/null | head -10
        [[ $UPDATES -gt 10 ]] && echo "... and $(($UPDATES - 10)) more"
    fi
fi

if command -v yay >/dev/null 2>&1; then
    AUR_UPDATES=$(yay -Qua 2>/dev/null | wc -l)
    echo "Available AUR updates: $AUR_UPDATES"
    if [[ $AUR_UPDATES -gt 0 ]]; then
        echo "Outdated AUR packages:"
        yay -Qua 2>/dev/null | head -5
        [[ $AUR_UPDATES -gt 5 ]] && echo "... and $(($AUR_UPDATES - 5)) more"
    fi
fi
echo

# Security Status
echo "SECURITY STATUS:"
echo "================"
echo "Firewall (UFW):"
if command -v ufw >/dev/null 2>&1; then
    ufw status | head -3
else
    echo "  UFW not installed"
fi
echo

echo "Fail2ban:"
if systemctl is-active --quiet fail2ban 2>/dev/null; then
    echo "  Status: Active"
    BANNED=$(fail2ban-client status | grep "Jail list:" | cut -d: -f2 | wc -w)
    echo "  Active jails: $BANNED"
else
    echo "  Status: Inactive or not installed"
fi
echo

echo "SSH Service:"
if systemctl is-active --quiet sshd 2>/dev/null; then
    echo "  Status: Active"
    echo "  Port: $(grep -E '^Port' /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}' || echo '22')"
else
    echo "  Status: Inactive"
fi
echo

# System Health
echo "SYSTEM HEALTH:"
echo "=============="
echo "Load Average: {{ ansible_loadavg['1m'] }} {{ ansible_loadavg['5m'] }} {{ ansible_loadavg['15m'] }}"
echo "Running Processes: $(ps aux | wc -l)"
echo "Network Connections: $(ss -tuln | wc -l)"
echo

# Disk Health
echo "DISK HEALTH:"
echo "============"
if command -v smartctl >/dev/null 2>&1; then
    for disk in /dev/sd? /dev/nvme?n?; do
        if [[ -e "$disk" ]]; then
            echo "Checking $disk..."
            smartctl -H "$disk" 2>/dev/null | grep -E "(SMART overall-health|SMART Health Status)" || echo "  No SMART data available"
        fi
    done
else
    echo "smartctl not available - install smartmontools for disk health monitoring"
fi
echo

# Log Analysis
echo "LOG ANALYSIS:"
echo "============="
echo "Recent system errors (last 24 hours):"
journalctl --since="24 hours ago" --priority=3 --no-pager --lines=5 2>/dev/null || echo "No recent errors found"
echo

echo "Recent authentication failures:"
journalctl --since="24 hours ago" -u sshd --no-pager --lines=5 2>/dev/null | grep -i "failed\|failure" | tail -3 || echo "No recent authentication failures"
echo

# Service Status
echo "CRITICAL SERVICES:"
echo "=================="
CRITICAL_SERVICES=(
    "NetworkManager"
    "systemd-resolved"
    "systemd-timesyncd"
{% if desktop.environment == 'hyprland' %}
    "sddm"
{% endif %}
{% if security.firewall.enabled %}
    "ufw"
{% endif %}
{% if security.fail2ban.enabled %}
    "fail2ban"
{% endif %}
)

for service in "${CRITICAL_SERVICES[@]}"; do
    if systemctl is-active --quiet "$service" 2>/dev/null; then
        echo "  $service: Active"
    else
        echo "  $service: Inactive or not found"
    fi
done
echo

# Power Management (for laptops)
{% if ansible_form_factor is defined and ansible_form_factor == 'Laptop' %}
echo "POWER MANAGEMENT:"
echo "================="
if command -v tlp-stat >/dev/null 2>&1; then
    echo "TLP Status:"
    tlp-stat -s 2>/dev/null | head -3
fi

if [[ -f /sys/class/power_supply/BAT0/capacity ]]; then
    echo "Battery Level: $(cat /sys/class/power_supply/BAT0/capacity)%"
fi

if [[ -f /sys/class/power_supply/BAT0/status ]]; then
    echo "Battery Status: $(cat /sys/class/power_supply/BAT0/status)"
fi
echo
{% endif %}

# Maintenance Recommendations
echo "MAINTENANCE RECOMMENDATIONS:"
echo "============================"
if [[ $UPDATES -gt 0 ]]; then
    echo "- Update system packages: sudo pacman -Syu"
fi
if [[ ${AUR_UPDATES:-0} -gt 0 ]]; then
    echo "- Update AUR packages: yay -Syu"
fi

# Check for old log files
OLD_LOGS=$(find /var/log -name "*.log" -mtime +30 2>/dev/null | wc -l)
if [[ $OLD_LOGS -gt 0 ]]; then
    echo "- Clean old log files: sudo journalctl --vacuum-time=30d"
fi

# Check for package cache
if [[ -d /var/cache/pacman/pkg ]]; then
    CACHE_SIZE=$(du -sh /var/cache/pacman/pkg 2>/dev/null | cut -f1)
    echo "- Clean package cache ($CACHE_SIZE): sudo pacman -Sc"
fi

# Check for orphaned packages
ORPHANS=$(pacman -Qdt 2>/dev/null | wc -l)
if [[ $ORPHANS -gt 0 ]]; then
    echo "- Remove $ORPHANS orphaned packages: sudo pacman -Rns \$(pacman -Qdt | awk '{print \$1}')"
fi

echo
echo "Report generated on $(date)"
echo "Run this script regularly to monitor system health."