# Docker Compose Example for Arch Linux Deployment
# Demonstrates environment variable password management in containerized deployment

version: '3.8'

services:
  arch-deployment:
    image: archlinux:latest
    container_name: arch_linux_deployer
    
    # Environment variables for password management
    environment:
      # Required passwords
      - DEPLOY_USER_PASSWORD=${DEPLOY_USER_PASSWORD}
      - DEPLOY_ROOT_PASSWORD=${DEPLOY_ROOT_PASSWORD}
      
      # Optional passwords
      - DEPLOY_LUKS_PASSPHRASE=${DEPLOY_LUKS_PASSPHRASE}
      - DEPLOY_WIFI_PASSWORD=${DEPLOY_WIFI_PASSWORD}
      
      # System configuration
      - DEPLOY_HOSTNAME=${DEPLOY_HOSTNAME:-archlinux-docker}
      - DEPLOY_USERNAME=${DEPLOY_USERNAME:-dockeruser}
      - DEPLOY_TIMEZONE=${DEPLOY_TIMEZONE:-UTC}
      - DEPLOY_KEYMAP=${DEPLOY_KEYMAP:-us}
      
      # Deployment options
      - DEPLOY_ENABLE_ENCRYPTION=${DEPLOY_ENABLE_ENCRYPTION:-false}
      - DEPLOY_AUTO_REBOOT=${DEPLOY_AUTO_REBOOT:-false}
      
      # Email delivery (optional)
      - DEPLOY_EMAIL_RECIPIENT=${DEPLOY_EMAIL_RECIPIENT}
      - DEPLOY_SMTP_SERVER=${DEPLOY_SMTP_SERVER}
      - DEPLOY_SMTP_USERNAME=${DEPLOY_SMTP_USERNAME}
      - DEPLOY_SMTP_PASSWORD=${DEPLOY_SMTP_PASSWORD}
    
    # Use .env file for local development
    env_file:
      - .env
    
    # Volume mounts for persistent data
    volumes:
      - ./deployment-logs:/var/log/deployment
      - ./config-backup:/backup
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    # Privileged mode required for system installation
    privileged: true
    
    # Network configuration
    network_mode: host
    
    # Working directory
    working_dir: /deployment
    
    # Command to run deployment
    command: |
      sh -c "
        echo 'üê≥ Starting Arch Linux deployment in Docker container'
        echo 'Container: arch_linux_deployer'
        echo 'Hostname: ${DEPLOY_HOSTNAME:-archlinux-docker}'
        echo 'Username: ${DEPLOY_USERNAME:-dockeruser}'
        
        # Update package manager
        pacman -Sy --noconfirm curl bash git
        
        # Download deployment script
        curl -fsSL https://raw.githubusercontent.com/LyeosMaouli/lm_archlinux_desktop/main/scripts/deployment/zero_touch_deploy.sh -o zero_touch_deploy.sh
        chmod +x zero_touch_deploy.sh
        
        # Validate password environment
        if [[ -z \"\$DEPLOY_USER_PASSWORD\" ]] || [[ -z \"\$DEPLOY_ROOT_PASSWORD\" ]]; then
          echo '‚ùå Required password environment variables not set'
          echo 'Please check your .env file or environment configuration'
          exit 1
        fi
        
        # Run deployment with environment variable passwords
        ./zero_touch_deploy.sh --password-mode env
        
        # Keep container running for inspection
        tail -f /dev/null
      "
    
    # Health check
    healthcheck:
      test: ["CMD", "pgrep", "-f", "zero_touch_deploy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    
    # Restart policy
    restart: unless-stopped
    
    # Labels for organization
    labels:
      - "project=arch-linux-automation"
      - "component=deployment"
      - "environment=${DEPLOY_ENVIRONMENT:-development}"

  # Optional: Database for deployment tracking
  deployment-db:
    image: postgres:15-alpine
    container_name: deployment_db
    environment:
      - POSTGRES_DB=deployment_tracking
      - POSTGRES_USER=deploy_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_db_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    profiles:
      - database

  # Optional: Web interface for deployment monitoring
  deployment-web:
    image: nginx:alpine
    container_name: deployment_web
    ports:
      - "8080:80"
    volumes:
      - ./web:/usr/share/nginx/html:ro
      - ./deployment-logs:/usr/share/nginx/html/logs:ro
    restart: unless-stopped
    profiles:
      - web

# Named volumes
volumes:
  postgres_data:
    driver: local

# Networks
networks:
  default:
    name: arch_deployment_network
    driver: bridge

# Example .env file content:
# Copy to .env and customize with your actual passwords
#
# # Required passwords
# DEPLOY_USER_PASSWORD=your_secure_user_password
# DEPLOY_ROOT_PASSWORD=your_secure_root_password
# 
# # Optional passwords
# DEPLOY_LUKS_PASSPHRASE=your_luks_encryption_passphrase
# DEPLOY_WIFI_PASSWORD=your_wifi_password
# 
# # System configuration
# DEPLOY_HOSTNAME=my-archlinux
# DEPLOY_USERNAME=myuser
# DEPLOY_TIMEZONE=America/New_York
# DEPLOY_KEYMAP=us
# 
# # Deployment options
# DEPLOY_ENABLE_ENCRYPTION=true
# DEPLOY_AUTO_REBOOT=false
# DEPLOY_ENVIRONMENT=development
# 
# # Email configuration (optional)
# DEPLOY_EMAIL_RECIPIENT=admin@example.com
# DEPLOY_SMTP_SERVER=smtp.gmail.com
# DEPLOY_SMTP_USERNAME=sender@gmail.com
# DEPLOY_SMTP_PASSWORD=app_password
# 
# # Database password (if using database profile)
# DB_PASSWORD=secure_database_password

# Usage instructions:
#
# 1. Copy and customize .env file:
#    cp .env.example .env
#    nano .env
#
# 2. Run basic deployment:
#    docker-compose up arch-deployment
#
# 3. Run with database tracking:
#    docker-compose --profile database up
#
# 4. Run with web interface:
#    docker-compose --profile web up
#
# 5. Run everything:
#    docker-compose --profile database --profile web up
#
# 6. Check deployment logs:
#    docker-compose logs -f arch-deployment
#
# 7. Clean up:
#    docker-compose down
#    docker-compose down -v  # Remove volumes too